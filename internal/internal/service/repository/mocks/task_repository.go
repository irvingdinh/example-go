// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/irvingdinh/example-go/internal/internal/model"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/irvingdinh/example-go/internal/internal/service/repository"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, args
func (_m *TaskRepository) CreateTask(ctx context.Context, args repository.CreateTaskArgs) (*model.Task, error) {
	ret := _m.Called(ctx, args)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreateTaskArgs) *model.Task); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.CreateTaskArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *TaskRepository) DeleteTask(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTasks provides a mock function with given fields: ctx
func (_m *TaskRepository) GetTasks(ctx context.Context) ([]*model.Task, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Task
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkTaskAsCompleted provides a mock function with given fields: ctx, id
func (_m *TaskRepository) MarkTaskAsCompleted(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
